import {
  ChannelType,
  ChatInputCommandInteraction,
  Invite,
  MessageFlags,
  PermissionFlagsBits,
  SectionBuilder,
  SlashCommandBuilder,
} from "discord.js";
import humanizeDuration from "humanize-duration";

export default {
  data: new SlashCommandBuilder()
    .setName("generate-invite")
    .setDescription("Generate an invite link for the server")
    .setDefaultMemberPermissions(PermissionFlagsBits.ManageGuild)
    .setContexts(0)
    .addUserOption((op) =>
      op
        .setName("target-user")
        .setDescription(
          "User to display as the inviter | Default: The Bot itself"
        )
        .setRequired(false)
    )
    .addChannelOption((op) =>
      op
        .setName("channel")
        .setDescription("Channel for the invite | Default: Current channel")
        .setRequired(false)
        .addChannelTypes(
          ChannelType.GuildText,
          ChannelType.GuildForum,
          ChannelType.GuildVoice,
          ChannelType.GuildStageVoice,
          ChannelType.GuildMedia,
          ChannelType.GuildAnnouncement
        )
    )
    .addIntegerOption((op) =>
      op
        .setName("max-uses")
        .setDescription(
          "Maximum uses for the invite (0-100) | Default: 0 (no limit)"
        )
        .setMinValue(0)
        .setMaxValue(100)
        .setRequired(false)
    )
    .addIntegerOption((op) =>
      op
        .setName("max-age")
        .setDescription(
          "Seconds until invite expires (0-604800) | Default: 0 (never expires)"
        )
        .setMinValue(0)
        .setMaxValue(604_800)
        .setRequired(false)
    )
    .addBooleanOption((op) =>
      op
        .setName("temporary")
        .setDescription("Grant temporary membership | Default: false")
        .setRequired(false)
    )
    .addBooleanOption((op) =>
      op
        .setName("unique")
        .setDescription("Create a unique invite | Default: true")
        .setRequired(false)
    ),

  async run(ctx: ChatInputCommandInteraction) {
    if (!ctx.inGuild() || !ctx.inCachedGuild()) return; // TS type guard things
    await ctx.deferReply({ flags: MessageFlags.IsComponentsV2 | 64 });

    const options = {
      targetUserId: ctx.options.getUser("target-user")?.id ?? undefined,
      channelId: ctx.options.getChannel("channel")?.id ?? ctx.channelId,
      maxUses: ctx.options.getInteger("max-uses") ?? 0,
      maxAge: ctx.options.getInteger("max-age") ?? 0,
      temporary: ctx.options.getBoolean("temporary") ?? false,
      unique: ctx.options.getBoolean("unique") ?? true,
    };
    const channel = await ctx.guild.channels.fetch(options.channelId);
    if (!channel) {
      await ctx.editReply("Channel not found.");
      return;
    }

    let invite: Invite;
    try {
      invite = await ctx.guild.invites.create(options.channelId, {
        maxAge: options.maxAge,
        maxUses: options.maxUses,
        targetUser: options.targetUserId,
        temporary: options.temporary,
        unique: options.unique,
        reason: `Invite generated by ${ctx.user.username} (${ctx.user.id})`,
      });
    } catch (err) {
      console.error(err);
      await ctx.editReply({
        flags: MessageFlags.IsComponentsV2 | 64,
        components: [
          new SectionBuilder()
            .addTextDisplayComponents((text) =>
              text.setContent("Error generating invite.")
            )
            .addTextDisplayComponents((text) =>
              text.setContent("```" + String(err) + "```")
            ),
        ],
      });
      return;
    }

    await ctx.editReply({
      components: [
        new SectionBuilder()
          .addTextDisplayComponents((text) =>
            text.setContent("Invite generated!")
          )
          .addTextDisplayComponents((text) =>
            text.setContent(
              [
                "### Details:",
                `- **Code:** \`${invite.code}\``,
                `- **URL:** <https://discord.gg/${invite.code}>`,
                `- **Channel:** <#${channel.id}>`,
                `- **Inviter:** <@${options.targetUserId}>`,
                `- **Max Uses:** \`${options.maxUses}\``,
                `- **Max Age:** \`${humanizeDuration(options.maxAge * 1000, {
                  maxDecimalPoints: 2,
                  units: ["d", "h", "m", "s"],
                })}\``,
                `- **Temporary:** \`${options.temporary}\``,
                `- **Unique:** \`${options.unique}\``,
              ].join("\n")
            )
          )
          .setButtonAccessory((btn) =>
            btn
              .setStyle(5)
              .setLabel("Use Invite")
              .setEmoji({
                name: "ðŸ”—",
              })
              .setURL(`https://discord.gg/${invite.code}`)
          ),
      ],
    });
  },
};
